### 要在 PyQt 的 QFormLayout 中添加一个水平的分隔线，你可以使用 QFrame 和 QHBoxLayout。QFrame 是一个小部件，它可以显示线条和边框。你可以创建一个包含水平线条的 QFrame，然后将其添加到 QHBoxLayout 中。最后，将 QHBoxLayout 添加到 QFormLayout 中即可。

以下是一个示例代码：

```python
import sys
from PyQt5.QtWidgets import QApplication, QFormLayout, QFrame, QHBoxLayout, QLabel, QLineEdit, QWidget
from PyQt5.QtCore import Qt

app = QApplication(sys.argv)

widget = QWidget()
layout = QFormLayout()

# Add widgets to the layout
layout.addRow("Label 1:", QLineEdit())
layout.addRow("Label 2:", QLineEdit())

# Add a horizontal separator
separator = QFrame()
separator.setFrameShape(QFrame.HLine)
separator.setFrameShadow(QFrame.Sunken)

separator_layout = QHBoxLayout()
separator_layout.addWidget(separator)

# Add more widgets below the separator
layout.addRow(separator_layout)
layout.addRow("Label 3:", QLineEdit())
layout.addRow("Label 4:", QLineEdit())

widget.setLayout(layout)
widget.show()

sys.exit(app.exec_())
```

在这个示例代码中，我们创建了一个包含水平线条的 QFrame，并将其添加到了 QHBoxLayout 中。然后，我们将 QHBoxLayout 添加到了 QFormLayout 中。这样就可以在布局中添加一个水平分隔线。

希望这个示例代码能帮到你！如果你还有其他问题，请随时提问。

### 要在 PyQt 中使 QLineEdit 只读，你可以使用 `setReadOnly()` 方法将其设置为只读模式。这将禁用用户在 QLineEdit 中输入或编辑文本。

以下是一个示例代码：

```python
import sys
from PyQt5.QtWidgets import QApplication, QFormLayout, QLineEdit, QWidget

app = QApplication(sys.argv)

widget = QWidget()
layout = QFormLayout()

# Add a read-only QLineEdit to the layout
readonly_edit = QLineEdit("Read-only text")
readonly_edit.setReadOnly(True)
layout.addRow("Label 1:", readonly_edit)

# Add an editable QLineEdit to the layout
editable_edit = QLineEdit("Editable text")
layout.addRow("Label 2:", editable_edit)

widget.setLayout(layout)
widget.show()

sys.exit(app.exec_())
```

在这个示例代码中，我们使用 `setReadOnly(True)` 方法将第一个 QLineEdit 设置为只读模式，这将禁用用户在该 QLineEdit 中输入或编辑文本。第二个 QLineEdit 是可编辑的。

希望这个示例代码能帮到你！如果你还有其他问题，请随时提问。

### 要在 PyQt 的 QFormLayout 中添加一个分组框，其中包含多个 QLineEdit 控件，你可以使用 QGroupBox 和 QVBoxLayout。QGroupBox 是一个小部件，它可以将其他控件组合在一起，并显示一个标题。你可以创建一个包含多个 QLineEdit 的 QVBoxLayout，然后将其添加到 QGroupBox 中。最后，将 QGroupBox 添加到 QFormLayout 中即可。

以下是一个示例代码：

```python
import sys
from PyQt5.QtWidgets import QApplication, QFormLayout, QGroupBox, QHBoxLayout, QLineEdit, QVBoxLayout, QWidget

app = QApplication(sys.argv)

widget = QWidget()
layout = QFormLayout()

# Create a group box with multiple QLineEdit controls
group_box = QGroupBox("Group Box")
group_box_layout = QVBoxLayout()

for i in range(3):
    line_edit = QLineEdit()
    group_box_layout.addWidget(line_edit)

group_box.setLayout(group_box_layout)

# Add the group box to the layout
layout.addRow(group_box)

widget.setLayout(layout)
widget.show()

sys.exit(app.exec_())
```

在这个示例代码中，我们使用 QVBoxLayout 创建了一个包含多个 QLineEdit 的分组框。然后，我们将分组框添加到了 QFormLayout 中。

希望这个示例代码能帮到你！如果你还有其他问题，请随时提问。